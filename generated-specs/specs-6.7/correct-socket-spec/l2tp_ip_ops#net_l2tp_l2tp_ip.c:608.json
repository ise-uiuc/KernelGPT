{
  "socket": {
    "domain": "AF_INET",
    "type": "SOCK_DGRAM",
    "spec": "socket$KGPT_inet_l2tp(domain const[AF_INET], type const[SOCK_DGRAM], proto const[IPPROTO_L2TP]) sock_inet_l2tp"
  },
  "resources": {
    "sock_inet_l2tp": {
      "type": "sock",
      "spec": "resource sock_inet_l2tp[sock]"
    }
  },
  "types": {
    "IPPROTO_L2TP": "define IPPROTO_L2TP 115"
  },
  "socket_addr": "sockaddr_in",
  "ioctls": {
    "SIOCPNADDRESOURCE": {
      "arg": "intptr",
      "arg_name_in_usage": "",
      "arg_inference": null
    }
  },
  "existing_ioctls": {
    "SIOCADDRT": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "ip_rt_ioctl"
        ],
        "type": [
          "rtentry"
        ],
        "usage": [
          "if (copy_from_user(&rt, p, sizeof(struct rtentry)))"
        ]
      }
    },
    "SIOCDELRT": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "ip_rt_ioctl"
        ],
        "type": [
          "rtentry"
        ],
        "usage": [
          "if (copy_from_user(&rt, p, sizeof(struct rtentry)))"
        ]
      }
    },
    "SIOCRTMSG": {
      "arg": "UNUSED_ARG",
      "arg_name_in_usage": [],
      "arg_inference": null
    },
    "SIOCDARP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "arp_ioctl"
        ],
        "type": [],
        "usage": [
          "err = arp_ioctl(net, cmd, (void __user *)arg);"
        ]
      }
    },
    "SIOCGARP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "arp_ioctl"
        ],
        "type": [],
        "usage": [
          "err = arp_ioctl(net, cmd, (void __user *)arg);"
        ]
      }
    },
    "SIOCSARP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "arp_ioctl"
        ],
        "type": [],
        "usage": [
          "err = arp_ioctl(net, cmd, (void __user *)arg);"
        ]
      }
    },
    "SIOCGIFADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);",
          "if (!err && put_user_ifreq(&ifr, p))"
        ]
      }
    },
    "SIOCGIFBRDADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);",
          "if (!err && put_user_ifreq(&ifr, p))"
        ]
      }
    },
    "SIOCGIFNETMASK": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);",
          "if (!err && put_user_ifreq(&ifr, p))"
        ]
      }
    },
    "SIOCGIFDSTADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);",
          "if (!err && put_user_ifreq(&ifr, p))"
        ]
      }
    },
    "SIOCGIFPFLAGS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);",
          "if (!err && put_user_ifreq(&ifr, p))"
        ]
      }
    },
    "SIOCSIFADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);"
        ]
      }
    },
    "SIOCSIFBRDADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);"
        ]
      }
    },
    "SIOCSIFNETMASK": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);"
        ]
      }
    },
    "SIOCSIFDSTADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);"
        ]
      }
    },
    "SIOCSIFPFLAGS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);"
        ]
      }
    },
    "SIOCSIFFLAGS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "devinet_ioctl"
        ],
        "type": [
          "ifreq"
        ],
        "usage": [
          "if (get_user_ifreq(&ifr, NULL, p))",
          "err = devinet_ioctl(net, cmd, &ifr);"
        ]
      }
    },
    "SIOCGETVIFCNT": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "sock_ioctl_inout"
        ],
        "type": [
          "sioc_vif_req"
        ],
        "usage": [
          "struct sioc_vif_req buffer;",
          "return sock_ioctl_inout(sk, cmd, arg, &buffer, sizeof(buffer));"
        ]
      }
    },
    "SIOCGETSGCNT": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "sock_ioctl_inout"
        ],
        "type": [
          "sioc_sg_req"
        ],
        "usage": [
          "struct sioc_sg_req buffer;",
          "return sock_ioctl_inout(sk, cmd, arg, &buffer, sizeof(buffer));"
        ]
      }
    },
    "SIOCGETMIFCNT_IN6": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "sock_ioctl_inout"
        ],
        "type": [
          "sioc_mif_req6"
        ],
        "usage": [
          "struct sioc_mif_req6 buffer;",
          "return sock_ioctl_inout(sk, cmd, arg, &buffer, sizeof(buffer));"
        ]
      }
    },
    "SIOCGETSGCNT_IN6": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "sock_ioctl_inout"
        ],
        "type": [
          "sioc_sg_req6"
        ],
        "usage": [
          "struct sioc_sg_req6 buffer;",
          "return sock_ioctl_inout(sk, cmd, arg, &buffer, sizeof(buffer));"
        ]
      }
    },
    "SIOCPNDELRESOURCE": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "karg"
      ],
      "arg_inference": {
        "function": [
          "sk->sk_prot->ioctl"
        ],
        "type": [],
        "usage": [
          "int karg;",
          "if (get_user(karg, (int __user *)arg))",
          "return sk->sk_prot->ioctl(sk, cmd, &karg);"
        ]
      }
    }
  },
  "unknown_cmd_ioctls": {},
  "proto_ops": {
    "bind": "inet_bind",
    "connect": "inet_dgram_connect",
    "accept": "sock_no_accept",
    "poll": "datagram_poll",
    "ioctl": "inet_ioctl",
    "sendmsg": "inet_sendmsg",
    "recvmsg": "sock_common_recvmsg",
    "setsockopt": "sock_common_setsockopt",
    "getsockopt": "sock_common_getsockopt"
  },
  "path": "/scratch/xxxxxx-data/xxxxxx/linux/net/l2tp/l2tp_ip.c:608",
  "ops_name": "l2tp_ip_ops",
  "syscall_specs": {
    "socket$KGPT_inet_l2tp": "socket$KGPT_inet_l2tp(domain const[AF_INET], type const[SOCK_DGRAM], proto const[IPPROTO_L2TP]) sock_inet_l2tp",
    "bind$KGPT_l2tp_ip_ops": "bind$KGPT_l2tp_ip_ops(fd sock_inet_l2tp, addr ptr[in, sockaddr_in], addrlen len[addr])",
    "connect$KGPT_l2tp_ip_ops": "connect$KGPT_l2tp_ip_ops(fd sock_inet_l2tp, addr ptr[in, sockaddr_in], addrlen len[addr])",
    "accept4$KGPT_l2tp_ip_ops": "accept4$KGPT_l2tp_ip_ops(fd sock_inet_l2tp, peer ptr[out, sockaddr_in, opt], peerlen ptr[inout, len[peer, int32]], flags flags[accept_flags]) sock_inet_l2tp",
    "sendto$KGPT_l2tp_ip_ops": "sendto$KGPT_l2tp_ip_ops(fd sock_inet_l2tp, buf ptr[in, array[int8]], len len[buf], f flags[send_flags], addr ptr[in, sockaddr_in, opt], addrlen len[addr])",
    "recvfrom$KGPT_l2tp_ip_ops": "recvfrom$KGPT_l2tp_ip_ops(fd sock_inet_l2tp, buf ptr[out, array[int8]], len len[buf], f flags[recv_flags], addr ptr[in, sockaddr_in, opt], addrlen len[addr])",
    "ioctl$KGPT_SIOCPNADDRESOURCE": "ioctl$KGPT_SIOCPNADDRESOURCE(fd sock_inet_l2tp, cmd const[SIOCPNADDRESOURCE], arg intptr)"
  },
  "init_syscalls": [
    "socket$KGPT_inet_l2tp"
  ],
  "includes": [
    "linux/net.h",
    "uapi/linux/in.h",
    "samples/bpf/net_shared.h",
    "uapi/linux/phonet.h"
  ],
  "unused_types": {},
  "ignored_types": {
    "sockaddr_in": "EXISTING"
  }
}