{
  "open": {
    "filename": "/dev/ptmx",
    "fd_name": "fd_6pack",
    "spec": "openat$KGPT_6pack(fd const[AT_FDCWD], file ptr[in, string[\"/dev/ptmx\"]], flags flags[open_flags], mode const[0]) fd_6pack"
  },
  "resources": {
    "fd_6pack": {
      "type": "fd",
      "spec": "resource fd_6pack[fd]"
    }
  },
  "path": "/scratch/xxxxxx-data/xxxxxx/linux/drivers/net/hamradio/6pack.c:746",
  "ioctls": {
    "SIOCGIFNAME": {
      "arg": "ptr[out, string]",
      "arg_name_in_usage": "arg",
      "arg_inference": null
    },
    "SIOCGIFENCAP": {
      "arg": "ptr[out, int32]",
      "arg_name_in_usage": "arg",
      "arg_inference": null
    },
    "SIOCSIFENCAP": {
      "arg": "intptr",
      "arg_name_in_usage": "arg",
      "arg_inference": null
    },
    "TIOCSETN": {
      "arg": "ptr[in, sgttyb]",
      "arg_name_in_usage": "arg",
      "arg_inference": null
    }
  },
  "types": {},
  "existing_ioctls": {
    "SIOCSIFHWADDR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "copy_from_user",
          "__dev_addr_set"
        ],
        "type": [],
        "usage": [
          "char addr[AX25_ADDR_LEN];",
          "if (copy_from_user(&addr, (void __user *)arg, AX25_ADDR_LEN)) {",
          "err = -EFAULT;",
          "break;",
          "}",
          "netif_tx_lock_bh(dev);",
          "__dev_addr_set(dev, &addr, AX25_ADDR_LEN);",
          "netif_tx_unlock_bh(dev);",
          "err = 0;"
        ]
      }
    },
    "TIOCGETP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "get_sgttyb"
        ],
        "type": [
          "sgttyb"
        ],
        "usage": [
          "return get_sgttyb(real_tty, (struct sgttyb __user *) arg);"
        ]
      }
    },
    "TIOCSETP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "set_sgttyb"
        ],
        "type": [
          "sgttyb"
        ],
        "usage": [
          "return set_sgttyb(real_tty, (struct sgttyb __user *) arg);"
        ]
      }
    },
    "TIOCGETC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "get_tchars"
        ],
        "type": [],
        "usage": [
          "return get_tchars(real_tty, p);"
        ]
      }
    },
    "TIOCSETC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_tchars"
        ],
        "type": [],
        "usage": [
          "return set_tchars(real_tty, p);"
        ]
      }
    },
    "TIOCGLTC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "get_ltchars"
        ],
        "type": [],
        "usage": [
          "return get_ltchars(real_tty, p);"
        ]
      }
    },
    "TIOCSLTC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_ltchars"
        ],
        "type": [],
        "usage": [
          "return set_ltchars(real_tty, p);"
        ]
      }
    },
    "TCSETSF": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p,  TERMIOS_FLUSH | TERMIOS_WAIT | TERMIOS_OLD);"
        ]
      }
    },
    "TCSETSW": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_WAIT | TERMIOS_OLD);"
        ]
      }
    },
    "TCSETS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_OLD);"
        ]
      }
    },
    "TCGETS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "kernel_termios_to_user_termios",
          "kernel_termios_to_user_termios_1"
        ],
        "type": [
          "termios",
          "termios2"
        ],
        "usage": [
          "copy_termios(real_tty, &kterm);",
          "if (kernel_termios_to_user_termios((struct termios __user *)arg, &kterm))",
          "if (kernel_termios_to_user_termios_1((struct termios __user *)arg, &kterm))"
        ]
      }
    },
    "TCGETS2": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "kernel_termios_to_user_termios"
        ],
        "type": [
          "termios2"
        ],
        "usage": [
          "copy_termios(real_tty, &kterm);",
          "if (kernel_termios_to_user_termios((struct termios2 __user *)arg, &kterm))"
        ]
      }
    },
    "TCSETSF2": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p,  TERMIOS_FLUSH | TERMIOS_WAIT);"
        ]
      }
    },
    "TCSETSW2": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_WAIT);"
        ]
      }
    },
    "TCSETS2": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, 0);"
        ]
      }
    },
    "TCGETA": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "get_termio"
        ],
        "type": [],
        "usage": [
          "return get_termio(real_tty, p);"
        ]
      }
    },
    "TCSETAF": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_FLUSH | TERMIOS_WAIT | TERMIOS_TERMIO);"
        ]
      }
    },
    "TCSETAW": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_WAIT | TERMIOS_TERMIO);"
        ]
      }
    },
    "TCSETA": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_TERMIO);"
        ]
      }
    },
    "TIOCGLCKTRMIOS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "kernel_termios_to_user_termios",
          "kernel_termios_to_user_termios_1"
        ],
        "type": [
          "termios",
          "termios2"
        ],
        "usage": [
          "copy_termios_locked(real_tty, &kterm);",
          "if (kernel_termios_to_user_termios((struct termios __user *)arg, &kterm))",
          "if (kernel_termios_to_user_termios_1((struct termios __user *)arg, &kterm))"
        ]
      }
    },
    "TIOCSLCKTRMIOS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "user_termios_to_kernel_termios",
          "user_termios_to_kernel_termios_1"
        ],
        "type": [
          "termios",
          "termios2"
        ],
        "usage": [
          "if (user_termios_to_kernel_termios(&kterm, (struct termios __user *) arg))",
          "if (user_termios_to_kernel_termios_1(&kterm, (struct termios __user *) arg))"
        ]
      }
    },
    "TIOCGSOFTCAR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "put_user"
        ],
        "type": [],
        "usage": [
          "ret = put_user((kterm.c_cflag & CLOCAL) ? 1 : 0, (int __user *)arg);"
        ]
      }
    },
    "TIOCSSOFTCAR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "tty_change_softcar"
        ],
        "type": [],
        "usage": [
          "return tty_change_softcar(real_tty, arg);"
        ]
      }
    }
  },
  "unknown_cmd_ioctls": {},
  "syscall_specs": {
    "openat$KGPT_6pack": "openat$KGPT_6pack(fd const[AT_FDCWD], file ptr[in, string[\"/dev/ptmx\"]], flags flags[open_flags], mode const[0]) fd_6pack",
    "ioctl$KGPT_SIOCGIFNAME": "ioctl$KGPT_SIOCGIFNAME(fd fd_6pack, cmd const[SIOCGIFNAME], arg ptr[out, string])",
    "ioctl$KGPT_SIOCGIFENCAP": "ioctl$KGPT_SIOCGIFENCAP(fd fd_6pack, cmd const[SIOCGIFENCAP], arg ptr[out, int32])",
    "ioctl$KGPT_SIOCSIFENCAP": "ioctl$KGPT_SIOCSIFENCAP(fd fd_6pack, cmd const[SIOCSIFENCAP], arg intptr)"
  },
  "init_syscalls": [
    "openat$KGPT_6pack"
  ],
  "includes": [
    "uapi/linux/sockios.h",
    "uapi/linux/fcntl.h",
    "arch/powerpc/include/uapi/asm/ioctls.h"
  ],
  "unused_types": {},
  "ignored_types": {}
}