{
  "open": {
    "filename": "/dev/ppp",
    "fd_name": "fd_ppp",
    "spec": "openat$KGPT_ppp(fd const[AT_FDCWD], file ptr[in, string[\"/dev/ppp\"]], flags flags[open_flags], mode const[0]) fd_ppp"
  },
  "resources": {
    "fd_ppp": {
      "type": "fd",
      "spec": "resource fd_ppp[fd]"
    }
  },
  "path": "/scratch/xxxxxx-data/xxxxxx/linux/drivers/net/ppp/ppp_synctty.c:99",
  "ioctls": {
    "PPPIOCGASYNCMAP": {
      "arg": "ptr[out, int32]",
      "arg_name_in_usage": "",
      "arg_inference": null
    },
    "PPPIOCSASYNCMAP": {
      "arg": "ptr[in, int32]",
      "arg_name_in_usage": "",
      "arg_inference": null
    },
    "PPPIOCGRASYNCMAP": {
      "arg": "ptr[out, int32]",
      "arg_name_in_usage": "",
      "arg_inference": null
    },
    "PPPIOCSRASYNCMAP": {
      "arg": "ptr[in, int32]",
      "arg_name_in_usage": "",
      "arg_inference": null
    },
    "PPPIOCGXASYNCMAP": {
      "arg": "ptr[out, array[u32, 8]]",
      "arg_name_in_usage": "argp",
      "arg_inference": null
    },
    "PPPIOCSXASYNCMAP": {
      "arg": "ptr[in, array[u32, 8]]",
      "arg_name_in_usage": "argp",
      "arg_inference": null
    }
  },
  "types": {},
  "existing_ioctls": {
    "PPPIOCGFLAGS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "argp"
      ],
      "arg_inference": {
        "function": [],
        "type": [
          "int"
        ],
        "usage": [
          "if (put_user(val, (int __user *) argp))"
        ]
      }
    },
    "PPPIOCSFLAGS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "argp"
      ],
      "arg_inference": {
        "function": [],
        "type": [
          "int"
        ],
        "usage": [
          "if (get_user(val, (int __user *) argp))"
        ]
      }
    },
    "PPPIOCGMRU": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "argp"
      ],
      "arg_inference": {
        "function": [],
        "type": [
          "int"
        ],
        "usage": [
          "if (put_user(ap->mru, (int __user *) argp))"
        ]
      }
    },
    "PPPIOCSMRU": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "argp"
      ],
      "arg_inference": {
        "function": [],
        "type": [
          "int"
        ],
        "usage": [
          "if (get_user(val, (int __user *) argp))"
        ]
      }
    }
  },
  "unknown_cmd_ioctls": {},
  "syscall_specs": {
    "openat$KGPT_ppp": "openat$KGPT_ppp(fd const[AT_FDCWD], file ptr[in, string[\"/dev/ppp\"]], flags flags[open_flags], mode const[0]) fd_ppp",
    "ioctl$KGPT_PPPIOCGASYNCMAP": "ioctl$KGPT_PPPIOCGASYNCMAP(fd fd_ppp, cmd const[PPPIOCGASYNCMAP], arg ptr[out, int32])",
    "ioctl$KGPT_PPPIOCSASYNCMAP": "ioctl$KGPT_PPPIOCSASYNCMAP(fd fd_ppp, cmd const[PPPIOCSASYNCMAP], arg ptr[in, int32])",
    "ioctl$KGPT_PPPIOCGRASYNCMAP": "ioctl$KGPT_PPPIOCGRASYNCMAP(fd fd_ppp, cmd const[PPPIOCGRASYNCMAP], arg ptr[out, int32])",
    "ioctl$KGPT_PPPIOCSRASYNCMAP": "ioctl$KGPT_PPPIOCSRASYNCMAP(fd fd_ppp, cmd const[PPPIOCSRASYNCMAP], arg ptr[in, int32])",
    "ioctl$KGPT_PPPIOCGXASYNCMAP": "ioctl$KGPT_PPPIOCGXASYNCMAP(fd fd_ppp, cmd const[PPPIOCGXASYNCMAP], arg ptr[out, array[int32, 8]])",
    "ioctl$KGPT_PPPIOCSXASYNCMAP": "ioctl$KGPT_PPPIOCSXASYNCMAP(fd fd_ppp, cmd const[PPPIOCSXASYNCMAP], arg ptr[in, array[int32, 8]])"
  },
  "init_syscalls": [
    "openat$KGPT_ppp"
  ],
  "includes": [
    "uapi/linux/fcntl.h",
    "uapi/linux/ppp-ioctl.h"
  ],
  "unused_types": {},
  "ignored_types": {}
}