{
  "open": {
    "filename": "/dev/pts/#",
    "fd_name": "fd_hci_uart",
    "spec": "syz_open_dev$KGPT_hci_uart(dev ptr[in, string[\"/dev/pts/#\"]], id proc[0, 1], flags flags[open_flags]) fd_hci_uart"
  },
  "resources": {
    "fd_hci_uart": {
      "type": "fd",
      "spec": "resource fd_hci_uart[fd]"
    }
  },
  "path": "/scratch/xxxxxx-data/xxxxxx/linux/drivers/bluetooth/hci_ldisc.c:822",
  "ioctls": {
    "HCIUARTGETPROTO": {
      "arg": "UNUSED_ARG",
      "arg_name_in_usage": [],
      "arg_inference": null
    },
    "HCIUARTGETDEVICE": {
      "arg": "UNUSED_ARG",
      "arg_name_in_usage": [],
      "arg_inference": null
    },
    "HCIUARTGETFLAGS": {
      "arg": "UNUSED_ARG",
      "arg_name_in_usage": [],
      "arg_inference": null
    },
    "HCIUARTSETPROTO": {
      "arg": "intptr",
      "arg_name_in_usage": "id",
      "arg_inference": null
    },
    "HCIUARTSETFLAGS": {
      "arg": "flags[hci_uart_flags]",
      "arg_name_in_usage": "arg",
      "arg_inference": null
    },
    "TIOCSETN": {
      "arg": "ptr[in, sgttyb]",
      "arg_name_in_usage": "arg",
      "arg_inference": null
    }
  },
  "types": {},
  "existing_ioctls": {
    "TCXONC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "tty_check_change",
          "__stop_tty",
          "__start_tty",
          "tty_send_xchar"
        ],
        "type": [],
        "usage": [
          "switch (arg) {",
          "case TCOOFF:",
          "case TCOON:",
          "case TCIOFF:",
          "case TCION:",
          "default:"
        ]
      }
    },
    "TCFLSH": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "tty_check_change",
          "__tty_perform_flush"
        ],
        "type": [],
        "usage": [
          "retval = tty_check_change(tty);",
          "return __tty_perform_flush(tty, arg);"
        ]
      }
    },
    "TIOCGETP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "get_sgttyb"
        ],
        "type": [
          "sgttyb"
        ],
        "usage": [
          "return get_sgttyb(real_tty, (struct sgttyb __user *) arg);"
        ]
      }
    },
    "TIOCSETP": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "set_sgttyb"
        ],
        "type": [
          "sgttyb"
        ],
        "usage": [
          "return set_sgttyb(real_tty, (struct sgttyb __user *) arg);"
        ]
      }
    },
    "TIOCGETC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "get_tchars"
        ],
        "type": [],
        "usage": [
          "return get_tchars(real_tty, p);"
        ]
      }
    },
    "TIOCSETC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_tchars"
        ],
        "type": [],
        "usage": [
          "return set_tchars(real_tty, p);"
        ]
      }
    },
    "TIOCGLTC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "get_ltchars"
        ],
        "type": [],
        "usage": [
          "return get_ltchars(real_tty, p);"
        ]
      }
    },
    "TIOCSLTC": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_ltchars"
        ],
        "type": [],
        "usage": [
          "return set_ltchars(real_tty, p);"
        ]
      }
    },
    "TCSETSF": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p,  TERMIOS_FLUSH | TERMIOS_WAIT | TERMIOS_OLD);"
        ]
      }
    },
    "TCSETSW": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_WAIT | TERMIOS_OLD);"
        ]
      }
    },
    "TCSETS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_OLD);"
        ]
      }
    },
    "TCGETS": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "copy_termios",
          "kernel_termios_to_user_termios"
        ],
        "type": [
          "termios"
        ],
        "usage": [
          "copy_termios(real_tty, &kterm);",
          "if (kernel_termios_to_user_termios((struct termios __user *)arg, &kterm))\n\t\t\tret = -EFAULT;"
        ]
      }
    },
    "TCGETA": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "get_termio"
        ],
        "type": [],
        "usage": [
          "return get_termio(real_tty, p);"
        ]
      }
    },
    "TCSETAF": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_FLUSH | TERMIOS_WAIT | TERMIOS_TERMIO);"
        ]
      }
    },
    "TCSETAW": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_WAIT | TERMIOS_TERMIO);"
        ]
      }
    },
    "TCSETA": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "p"
      ],
      "arg_inference": {
        "function": [
          "set_termios"
        ],
        "type": [],
        "usage": [
          "return set_termios(real_tty, p, TERMIOS_TERMIO);"
        ]
      }
    },
    "TIOCGSOFTCAR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "copy_termios",
          "put_user"
        ],
        "type": [],
        "usage": [
          "copy_termios(real_tty, &kterm);",
          "ret = put_user((kterm.c_cflag & CLOCAL) ? 1 : 0,\n\t\t\t\t\t(int __user *)arg);"
        ]
      }
    },
    "TIOCSSOFTCAR": {
      "arg": "UNKNOWN_ARG",
      "arg_name_in_usage": [
        "arg"
      ],
      "arg_inference": {
        "function": [
          "get_user",
          "tty_change_softcar"
        ],
        "type": [],
        "usage": [
          "if (get_user(arg, (unsigned int __user *) arg))\n\t\t\treturn -EFAULT;",
          "return tty_change_softcar(real_tty, arg);"
        ]
      }
    }
  },
  "unknown_cmd_ioctls": {},
  "syscall_specs": {
    "syz_open_dev$KGPT_hci_uart": "syz_open_dev$KGPT_hci_uart(dev ptr[in, string[\"/dev/pts/#\"]], id proc[0, 1], flags flags[open_flags]) fd_hci_uart",
    "ioctl$KGPT_HCIUARTGETPROTO": "ioctl$KGPT_HCIUARTGETPROTO(fd fd_hci_uart, cmd const[HCIUARTGETPROTO], arg ptr[in, array[int8]])",
    "ioctl$KGPT_HCIUARTGETDEVICE": "ioctl$KGPT_HCIUARTGETDEVICE(fd fd_hci_uart, cmd const[HCIUARTGETDEVICE], arg ptr[in, array[int8]])",
    "ioctl$KGPT_HCIUARTGETFLAGS": "ioctl$KGPT_HCIUARTGETFLAGS(fd fd_hci_uart, cmd const[HCIUARTGETFLAGS], arg ptr[in, array[int8]])",
    "ioctl$KGPT_HCIUARTSETPROTO": "ioctl$KGPT_HCIUARTSETPROTO(fd fd_hci_uart, cmd const[HCIUARTSETPROTO], arg intptr)",
    "ioctl$KGPT_HCIUARTSETFLAGS": "ioctl$KGPT_HCIUARTSETFLAGS(fd fd_hci_uart, cmd const[HCIUARTSETFLAGS], arg const[0])"
  },
  "init_syscalls": [
    "syz_open_dev$KGPT_hci_uart"
  ],
  "includes": [
    "arch/powerpc/include/uapi/asm/ioctls.h",
    "drivers/bluetooth/hci_uart.h"
  ],
  "unused_types": {},
  "ignored_types": {}
}